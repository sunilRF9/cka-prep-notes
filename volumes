Configure a volume to store these logs at /var/log/webapp on the host.
Name: webapp
Image Name: kodekloud/event-simulator
Volume HostPath: /var/log/webapp
Volume Mount: /log 

----
spec:
  containers:
  - env:
    - name: LOG_HANDLERS
      value: file
    image: kodekloud/event-simulator
    imagePullPolicy: Always
    name: event-simulator
    volumeMounts:
    - mountPath: /log
      name: log-volume
      readOnly: true
  volumes:
  - name: log-volume
    hostPath: 
      path: /var/log/webapp


---

Create PV

root@controlplane:~# cat vol.yaml 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-log
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/pv/log"
  persistentVolumeReclaimPolicy: Retain

---
Create PVC
root@controlplane:~# k apply -f vol-pvc.yaml 
persistentvolumeclaim/claim-log-1 created
root@controlplane:~# cat vol-pvc.yaml 
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: claim-log-1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Mi
---

claim pv in pod

root@controlplane:~# k delete pod webapp --force
warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.
pod "webapp" force deleted
root@controlplane:~# k apply -f op.yaml 
pod/webapp created
root@controlplane:~# cat op.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: webapp
  namespace: default
spec:
  containers:
  - env:
    - name: LOG_HANDLERS
      value: file
    image: kodekloud/event-simulator
    imagePullPolicy: Always
    name: event-simulator
    volumeMounts:
    - mountPath: /log
      name: log-volume
      readOnly: true
  volumes:
  - name: log-volume
    persistentVolumeClaim:
      claimName: claim-log-1

---

The Storage Class called local-storage makes use of VolumeBindingMode set to WaitForFirstConsumer. This will delay the binding and provisioning of a PersistentVolume until a Pod using the PersistentVolumeClaim is created.
---

Create a new pod called nginx with the image nginx:alpine. The Pod should make use of the PVC local-pvc and mount the volume at the path /var/www/html.


controlplane ~ ➜  kubectl get pvc
NAME        STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS    AGE
local-pvc   Pending                                      local-storage   5m2s

controlplane ~ ➜  vim  pod.yaml 

controlplane ~ ➜  kubectl apply -f pod.yaml 
pod/nginx created

controlplane ~ ➜  cat pod.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - image: nginx:alpine
    name: nginx
    volumeMounts:
    - mountPath: /var/www/html
      name: mypd
  volumes:
  - name: mypd
    persistentVolumeClaim:
      claimName: local-pvc
---
Create a new Storage Class called delayed-volume-sc that makes use of the below specs:


controlplane ~ ➜  kubectl apply -f  sc.yaml 
storageclass.storage.k8s.io/delayed-volume-sc created

controlplane ~ ➜  cat sc.yaml 
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: delayed-volume-sc
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - debug
volumeBindingMode: WaitForFirstConsumer

controlplane ~ ➜  kubectl describe sc delayed-volume-sc
Name:            delayed-volume-sc
IsDefaultClass:  No
Annotations:     kubectl.kubernetes.io/last-applied-configuration={"allowVolumeExpansion":true,"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"annotations":{},"name":"delayed-volume-sc"},"mountOptions":["debug"],"provisioner":"kubernetes.io/no-provisioner","reclaimPolicy":"Retain","volumeBindingMode":"WaitForFirstConsumer"}

Provisioner:           kubernetes.io/no-provisioner
Parameters:            <none>
AllowVolumeExpansion:  True
MountOptions:
  debug
ReclaimPolicy:      Retain
VolumeBindingMode:  WaitForFirstConsumer
Events:             <none>

provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
